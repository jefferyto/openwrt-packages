#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017 Yousong Zhou <yszhou4tech@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

USE_PROCD=1
START=99

ss_confdir=/var/etc/shadowsocks-libev
ss_bindir=/usr/bin


# common

with_common_validate_options() {
	"$@" \
		'disabled:bool:0' \
		'fast_open:bool:0' \
		'ipv6_first:bool:0' \
		'no_delay:bool:0' \
		'reuse_port:bool:0' \
		'verbose:bool:0' \
		'mode:or("tcp_only", "udp_only", "tcp_and_udp"):tcp_only' \
		'mtu:uinteger' \
		'timeout:uinteger' \
		'user:string'
}

add_common_options_json() {
	json_add_boolean use_syslog 1
	json_add_boolean fast_open "$fast_open"
	json_add_boolean ipv6_first "$ipv6_first"
	json_add_boolean no_delay "$no_delay"
	json_add_boolean reuse_port "$reuse_port"
	json_add_string mode "$mode"
	[ -z "$mtu" ] || json_add_int mtu "$mtu"
	[ -z "$timeout" ] || json_add_int timeout "$timeout"
	[ -z "$user" ] || json_add_string user "$user"
}

validate_server_options() {
	local stream_methods='"table", "rc4", "rc4-md5", "aes-128-cfb", "aes-192-cfb", "aes-256-cfb", "aes-128-ctr", "aes-192-ctr", "aes-256-ctr", "bf-cfb", "camellia-128-cfb", "camellia-192-cfb", "camellia-256-cfb", "salsa20", "chacha20", "chacha20-ietf"'
	local aead_methods='"aes-128-gcm", "aes-192-gcm", "aes-256-gcm", "chacha20-ietf-poly1305", "xchacha20-ietf-poly1305"'

	uci_load_validate shadowsocks-libev "$@" \
		'disabled:bool:0' \
		'server:host' \
		'server_port:port' \
		'password:string' \
		'key:string' \
		"method:or($stream_methods, $aead_methods)"
}

add_server_options_json() {
	[ "$2" = 0 ] || return 1
	[ "$disabled" = 0 ] || return 1
	[ -n "$server_port" ] || return 1

	[ -z "$server" ] || json_add_string server "$server"
	json_add_int server_port $server_port
	[ -z "$password" ] || json_add_string password "$password"
	[ -z "$key" ] || json_add_string key "$key"
	[ -z "$method" ] || json_add_string method "$method"
}

validate_client_options() {
	uci_load_validate shadowsocks-libev "$@" \
		'server:uci("shadowsocks-libev", "@server")' \
		'local_address:host:0.0.0.0' \
		'local_port:port'
}

add_client_options_json() {
	json_add_string local_address "$local_address"
	[ -z "$local_port" ] || json_add_int local_port "$local_port"
}

set_common_procd_params() {
	local bin="$1"
	local confjson="$2"
	local verbose="$3"

	procd_set_param command "$bin" -c "$confjson"
	[ "$verbose" = 0 ] || procd_append_param command -v
	procd_set_param file "$confjson"
	procd_set_param respawn
}


# server

validate_server_section() {
	validate_server_options server "$1" "$2"
}


# ss_local

validate_ss_local_section() {
	with_common_validate_options \
		validate_client_options ss_local "$1" "$2"
}

start_ss_local_instance() {
	local cfg="$1"
	local bin="$ss_bindir/ss-local"
	local confjson="$ss_confdir/ss_local.$cfg.json"

	[ -x "$bin" ] || return
	[ "$2" = 0 ] || return 1
	[ "$disabled" = 0 ] || return
	[ -n "$server" ] || return 1

	json_init
	add_common_options_json
	add_client_options_json
	validate_server_section "$server" add_server_options_json || return 1
	json_dump -i > "$confjson"

	procd_open_instance "ss_local.$cfg"
	set_common_procd_params "$bin" "$confjson" "$verbose"
	procd_close_instance
}


# ss_redir

validate_ss_redir_section() {
	with_common_validate_options \
		validate_client_options ss_redir "$1" "$2"
}

start_ss_redir_instance() {
	local cfg="$1"
	local bin="$ss_bindir/ss-redir"
	local confjson="$ss_confdir/ss_redir.$cfg.json"
	local linkedserver

	[ -x "$bin" ] || return
	[ "$2" = 0 ] || return 1
	[ "$disabled" = 0 ] || return
	[ -n "$server" ] || return 1

	json_init
	add_common_options_json
	add_client_options_json
	validate_server_section "$server" add_server_options_json || return 1
	json_dump -i > "$confjson"

	procd_open_instance "ss_redir.$cfg"
	set_common_procd_params "$bin" "$confjson" "$verbose"
	procd_close_instance

	config_get linkedserver "$server" server
	ss_redir_servers="$ss_redir_servers $linkedserver"
	if [ "$mode" = tcp_only -o "$mode" = "tcp_and_udp" ]; then
		eval "ss_rules_redir_tcp_$cfg=$local_port"
	fi
	if [ "$mode" = udp_only -o "$mode" = "tcp_and_udp" ]; then
		eval "ss_rules_redir_udp_$cfg=$local_port"
	fi
}


# ss_server

validate_ss_server_section() {
	with_common_validate_options \
		validate_server_options ss_server "$1" "$2" \
		'bind_address:ipaddr'
}

start_ss_server_instance() {
	local cfg="$1"
	local bin="$ss_bindir/ss-server"
	local confjson="$ss_confdir/ss_server.$cfg.json"

	[ -x "$bin" ] || return
	[ "$2" = 0 ] || return 1
	[ "$disabled" = 0 ] || return

	json_init
	add_common_options_json
	add_server_options_json "$cfg" "$2" || return 1
	json_dump -i > "$confjson"

	procd_open_instance "ss_server.$cfg"
	set_common_procd_params "$bin" "$confjson" "$verbose"
	[ -z "$bind_address" ] || procd_append_param command -b "$bind_address"
	procd_close_instance
}


# ss_tunnel

validate_ss_tunnel_section() {
	with_common_validate_options \
		validate_client_options ss_tunnel "$1" "$2" \
		'tunnel_address:regex(".+\:[0-9]+")'
}

start_ss_tunnel_instance() {
	local cfg="$1"
	local bin="$ss_bindir/ss-tunnel"
	local confjson="$ss_confdir/ss_tunnel.$cfg.json"

	[ -x "$bin" ] || return
	[ "$2" = 0 ] || return 1
	[ "$disabled" = 0 ] || return
	[ -n "$server" ] || return 1
	[ -n "$tunnel_address" ] || return 1

	json_init
	add_common_options_json
	add_client_options_json
	validate_server_section "$server" add_server_options_json || return 1
	json_add_string tunnel_address "$tunnel_address"
	json_dump -i > "$confjson"

	procd_open_instance "ss_tunnel.$cfg"
	set_common_procd_params "$bin" "$confjson" "$verbose"
	procd_close_instance
}


# ss_rules

validate_ss_rules_section() {
	uci_load_validate shadowsocks-libev ss_rules "$1" "$2" \
		'disabled:bool:0' \
		'redir_tcp:uci("shadowsocks-libev", "@ss_redir")' \
		'redir_udp:uci("shadowsocks-libev", "@ss_redir")' \
		'src_ips_bypass:or(ipaddr,cidr)' \
		'src_ips_forward:or(ipaddr,cidr)' \
		'src_ips_checkdst:or(ipaddr,cidr)' \
		'dst_ips_bypass_file:file' \
		'dst_ips_bypass:or(ipaddr,cidr)' \
		'dst_ips_forward_file:file' \
		'dst_ips_forward:or(ipaddr,cidr)' \
		'src_default:or("bypass", "forward", "checkdst"):checkdst' \
		'dst_default:or("bypass", "forward"):bypass' \
		'local_default:or("bypass", "forward", "checkdst"):bypass' \
		'dst_forward_recentrst:bool:0' \
		'ifnames:maxlength(15)' \
		'ipt_args:string'
}

set_ss_rules() {
	local bin="$ss_bindir/ss-rules"
	local local_port_tcp local_port_udp
	local args

	[ -x "$bin" ] || return 1
	"$bin" -f
	"$bin" -6 -f

	[ "$2" = 0 ] || return 1
	[ "$disabled" = 0 ] || return 0

	eval local_port_tcp="\$ss_rules_redir_tcp_$redir_tcp"
	eval local_port_udp="\$ss_rules_redir_udp_$redir_udp"
	[ -n "$local_port_tcp" -o -n "$local_port_udp" ] || return 1
	ss_redir_servers="$(echo "$ss_redir_servers" | tr ' ' '\n' | sort -u)"
	[ "$dst_forward_recentrst" = 0 ] || args="$args --dst-forward-recentrst"

	ss_rules_call
	ss_rules_call -6
}

ss_rules_call() {
	"$bin" "$@" \
			-s "$ss_redir_servers" \
			-l "$local_port_tcp" \
			-L "$local_port_udp" \
			--src-default "$src_default" \
			--dst-default "$dst_default" \
			--local-default "$local_default" \
			--dst-bypass-file "$dst_ips_bypass_file" \
			--dst-forward-file "$dst_ips_forward_file" \
			--dst-bypass "$dst_ips_bypass" \
			--dst-forward "$dst_ips_forward" \
			--src-bypass "$src_ips_bypass" \
			--src-forward "$src_ips_forward" \
			--src-checkdst "$src_ips_checkdst" \
			--ifnames "$ifnames" \
			--ipt-extra "$ipt_args" \
			$args \
		|| "$bin" "$@" -f
}

clear_ss_rules() {
	local bin="$ss_bindir/ss-rules"

	[ -x "$bin" ] && {
		"$bin" -f
		"$bin" -6 -f
	}
}


# main

start_service() {
	mkdir -p "$ss_confdir"
	config_load shadowsocks-libev

	config_foreach validate_ss_local_section ss_local start_ss_local_instance
	config_foreach validate_ss_redir_section ss_redir start_ss_redir_instance
	config_foreach validate_ss_server_section ss_server start_ss_server_instance
	config_foreach validate_ss_tunnel_section ss_tunnel start_ss_tunnel_instance

	validate_ss_rules_section ss_rules set_ss_rules
}

stop_service() {
	clear_ss_rules

	rm -rf "$ss_confdir"
}

service_triggers() {
	procd_add_reload_interface_trigger wan
	procd_add_reload_trigger shadowsocks-libev

	procd_open_validate
	validate_server_section
	validate_ss_local_section
	validate_ss_redir_section
	validate_ss_server_section
	validate_ss_tunnel_section
	validate_ss_rules_section
	procd_close_validate
}
